From e7e2477bd267ee50dfff38a1a6ceb968fe9dea78 Mon Sep 17 00:00:00 2001
From: Aleks <alesha.volchaninov@mail.ru>
Date: Sat, 18 Mar 2023 00:10:40 +0300
Subject: [PATCH 3/5] server done, now user can play MUD version from 13.03,
 except of attack command completion

---
 20230313/1/client.py |  70 ++++++++++++---
 20230313/1/server.py | 210 +++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 261 insertions(+), 19 deletions(-)

diff --git a/20230313/1/client.py b/20230313/1/client.py
index e2b6728..1713187 100644
--- a/20230313/1/client.py
+++ b/20230313/1/client.py
@@ -45,7 +45,7 @@ def make_args(available_cmds : dict[str, callable], cmd : list[str]):
                 return 2
 
     #возвращаем кортеж с аргументами
-    return tuple(args)
+    return args
 
 class network_link:
     reader = None
@@ -141,38 +141,83 @@ class game_shell(cmd.Cmd):
             res = await cur_task
             return res
 
+    async def complete(self, text, state):
+        """Return the next possible completion for 'text'.
+        If a command has not been entered, then complete against command list.
+        Otherwise try to call complete_<command> to get list of completions.
+        """
+        if state == 0:
+            import readline
+            origline = readline.get_line_buffer()
+            line = origline.lstrip()
+            stripped = len(origline) - len(line)
+            begidx = readline.get_begidx() - stripped
+            endidx = readline.get_endidx() - stripped
+            if begidx>0:
+                cmd, args, foo = self.parseline(line)
+                if cmd == '':
+                    compfunc = self.completedefault
+                else:
+                    try:
+                        compfunc = getattr(self, 'complete_' + cmd)
+                    except AttributeError:
+                        compfunc = self.completedefault
+            else:
+                compfunc = self.completenames
+            self.completion_matches = await compfunc(text, line, begidx, endidx)
+        try:
+            return self.completion_matches[state]
+        except IndexError:
+            return None
+
 
     async def caller(fin_args):
-        send_box = (" ".join(fin_args) + '\n').encode()
-        network_link.writer.write(send_box)
-        await network_link.writer.drain()
-        receive_from_server = asyncio.create_task(network_link.reader.readline())
-        q = await receive_from_server
-        print(q.decode(), end = '')
+        match fin_args:
+            case 1:
+                print("invalid command")
+            case 2:
+                print("invalid arguments")
+            case _:
+                while fin_args[-1] == '':
+                    fin_args.pop(-1)
+                send_box = ("'" + "' '".join(fin_args) + "'" + '\n').encode()
+                network_link.writer.write(send_box)
+                await network_link.writer.drain()
+                receive_from_server = asyncio.create_task(network_link.reader.readline())
+                q = await receive_from_server
+                strings_amount = int(q.decode())
+                for i in range(strings_amount):
+                    receive_from_server = asyncio.create_task(network_link.reader.readline())
+                    q = await receive_from_server
+                    print(q.decode(), end = '')
 
 
     async def do_up(self, args):
         cur_args = shlex.split(args)
         cur_args.insert(0, 'up')
         fin_args = make_args(game_shell.available_cmds, cur_args)
+        fin_args.insert(0, "move")
         await game_shell.caller(fin_args)
 
     async def do_down(self, args):
         cur_args = shlex.split(args)
         cur_args.insert(0, 'down')
         fin_args = make_args(game_shell.available_cmds, cur_args)
+        fin_args.insert(0, "move")
         await game_shell.caller(fin_args)
         
     async def do_right(self, args):
         cur_args = shlex.split(args)
         cur_args.insert(0, 'right')
         fin_args = make_args(game_shell.available_cmds, cur_args)
+        fin_args.insert(0, "move")
         await game_shell.caller(fin_args)
 
     async def do_left(self, args):
         cur_args = shlex.split(args)
         cur_args.insert(0, 'left')
         fin_args = make_args(game_shell.available_cmds, cur_args)
+        fin_args.insert(0, "move")
         await game_shell.caller(fin_args)
 
     async def do_attack(self, args):
@@ -191,11 +236,16 @@ class game_shell(cmd.Cmd):
         print("""format: attack <monster_name >with <weapon_name>
     attack monster with name <monster_name> with weapon <weapon_name>, if rhere is a monster on your current position""")
 
-    def complete_attack(self, text, line, begidx, endidx):
-        target_attack = game_shell.player.available_monsters()
+    async def complete_attack(self, text, line, begidx, endidx):
+        network_link.writer.write("complete")
+        await network_link.writer.drain()
+        receive_from_server = asyncio.create_task(network_link.reader.readline())
+        q = await receive_from_server
+        target_attack = [q.decode().split()]
         target_with = ["sword", "spear", "axe"]
 
         line = line.split()
+        print(line)
         if line[-1] in target_with or line[-1] == 'with':
                 completions = [target_with[game_shell.cur_weapon_pos]]
                 game_shell.cur_weapon_pos = ((game_shell.cur_weapon_pos + 1) % len(target_with))
@@ -235,7 +285,7 @@ class game_shell(cmd.Cmd):
             case 'addmon':
                 completions = target_addmon
             case 'coords':
-                completions = target_hello
+                completions = target_coords
             case 'hp':
                 completions = target_hp
             case 'hello':
diff --git a/20230313/1/server.py b/20230313/1/server.py
index f147680..afda9b2 100644
--- a/20230313/1/server.py
+++ b/20230313/1/server.py
@@ -1,11 +1,186 @@
-#!/usr/bin/env python3
+import cowsay
 import asyncio
+from typing import *
+import readline
+import shlex
+import cmd
+from io import StringIO
+
+jgsbat = cowsay.read_dot_cow(StringIO("""
+$the_cow = <<EOC;
+         $thoughts
+          $thoughts
+    ,_                    _,
+    ) '-._  ,_    _,  _.-' (
+    )  _.-'.|\\\\\--//|.'-._  (
+     )'   .'\/o\/o\/'.   `(
+      ) .' . \====/ . '. (
+       )  / <<    >> \  (
+        '-._/``  ``\_.-'
+  jgs     __\\\\\\\'--'//__
+         (((""`  `"")))
+EOC
+"""))
+
+#Класс монстров
+class Monster:
+    #инициализируем нового монстра: вносим приветствие и имя
+    def __init__(self, hello : str, name : str, hp : int):
+        self.hello = hello
+        self.name  = name
+        self.hp = hp
+
+    def get_name(self) -> str:
+        return self.name
+
+    #функция, реализующая битву с монстром. Ничего не возвращает
+    def greetings(self):
+        #Выводим монстра с приветствием
+        if self.name == 'jgsbat':
+            return cowsay.cowsay(self.hello, cowfile = jgsbat)
+        
+        return cowsay.cowsay(self.hello, cow = self.name)
+
+
+    def battle(self, damage: int) -> tuple[int]:
+        prev_hp = self.hp
+        self.hp -= damage
+        if self.hp <= 0:
+            return (0, prev_hp, self.name)
+        else:
+            return (self.hp, damage, self.name)
+
+
+#Класс локаций(карт)
+class Location:
+    #иницализируем новую локацию: задаем размеры и заводим пустой словарь монстров
+    def __init__(self, size_x : int = 10, size_y : int = 10):
+        self.size_x = size_x
+        self.size_y = size_y
+        #формат словаря: ключи - кортежи с координатами монстров (x,y),
+        #значения - объекты класса Monster
+        self.monsters = {}
+
+
+    #служебный метод, возвращающий кортеж с размерами локации
+    def get_size(self):
+        return (self.size_x, self.size_y)
+
+
+    #метод, реализующий добавление монстра name на клетку с координатами x,y и
+    #приветствием hello. Возвращает объект - монстра.
+    def add_monster(self, name : str, hello : str, hp : int, x : int, y : int) -> Monster:
+        #Проверяем корректность имени данного монстра. Если некорр. - возвращаем None
+        if name not in cowsay.list_cows() and name != 'jgsbat' :
+            return "Cannot add unknown monster"
+        
+        #проверяем наличие монстра по указанным координатам
+        flag = (x,y) in self.monsters
+
+        #Кладем в словарь монстров монстра с данным hello и name по ключу (x,y)
+        self.monsters[(x,y)] = Monster(hello, name, hp)
+        #Сообщаем игроку о произошедшем
+        return_str = f"Added monster {name} to ({x}, {y}) saying {hello}"
+        if flag:
+            return_str += "\nReplaced the old monster"
+
+        #Возвращаем нового монстра
+        return return_str
+
+    #Метод, реализующий происшествие при встрече игрока с монстром
+    #Возвращает булевое значение: был ли бой?
+    def encounter(self, x : int, y : int) -> bool:
+        #Если по указанным координатам есть монстр (т.е. кортеж с его координатами есть
+        #в ключах словаря с монстрами), то запускаем битву с ним
+        if (x,y) in self.monsters:
+            return self.monsters[(x,y)].greetings()
+        return ''
+
+    def encounter_attack(self, x: int, y: int, name: str, damage : int) -> Monster:
+        if (x,y) not in self.monsters:
+            return "No monster here"
+            
+        elif self.monsters[(x,y)].get_name() != name:
+                return f"No monster {name} here"
+
+        else:
+            res = self.monsters[(x,y)].battle(damage)
+            return_str = f"Attacked {res[2]}, damage {res[1]} hp\n"
+            
+            if res[0] == 0:
+                return_str += f"{res[2]} died"
+                self.monsters.pop((x,y))
+            else:
+                return_str += f"{res[2]} now has {res[0]} hp"
+
+            return return_str
+
+    def get_monsters(self) -> list[str]:
+        res = []
+        for coord_set in self.monsters:
+            cur_monster = self.monsters[coord_set]
+            res.append(cur_monster.get_name())
+        return res
+                
+
+#Класс игроков
+class Player:
+    #Инициализируем игрока: задаем локацию(Объект класса Location) и координаты точки спавна
+    def __init__(self, x : int = 0, y : int = 0, location : Location = Location()):
+        self.x = x
+        self.y = y
+        self.location = location
+
+    #Метод для передвижения игрока. Возвращает кортеж с итоговыми координатами.
+    def move(self, cmd : str) -> Tuple[int, int]:
+        #Меняем координаты в зависимости от команды с учетом того, что:
+        # 1) нумерация клеток увеличивается сверху вниз, слева направо
+        # 2) если игрок переходит границу, он появляется с обратной стороны поля
+        #    (реализовано при помощи операции % от соответсвющего габарита поля)
+        location_sizes = self.location.get_size()
+        match cmd:
+            case 'up':
+                self.y = (self.y - 1) % location_sizes[1]
+            case 'down':
+                self.y = (self.y + 1) % location_sizes[1]
+            case 'left':
+                self.x = (self.x - 1) % location_sizes[0]
+            case 'right':
+                self.x = (self.x + 1) % location_sizes[0]
+
+        #Сообщаем игроку о произошедшем и запускаем обработчик происшествия для текущей локации
+        return_str = f"Moved to ({self.x}, {self.y})"
+        meeting = self.location.encounter(self.x, self.y)
+        if meeting:
+            return_str += '\n' + meeting
+
+        return return_str
+
+    def init_monster(self, name : str, hello : str, hp : int, x : int, y : int) -> Monster:
+        return self.location.add_monster(name, hello, hp, x, y)
+
+    def attack(self, name:str, weapon : str = 'sword'):
+        weapons = {'sword': 10, 'spear': 15, 'axe': 20}
+        
+        if weapon not in weapons:
+            return "Unkown weapon"
+        else:
+            damage = weapons[weapon]
+            return self.location.encounter_attack(self.x, self.y, name, damage)
+
+    def available_monsters(self) -> list[str]:
+        return self.location.get_monsters()
+
+
 
 clients = {}
 
-async def chat(reader, writer):
+
+async def MUD(reader, writer):
+    available_cmds = {'move': Player.move, 'attack' : Player.attack, 'addmon': Player.init_monster}
+    player = Player()
     me = "{}:{}".format(*writer.get_extra_info('peername'))
-    print(me)
+    print(me, "Connected")
     clients[me] = asyncio.Queue()
     send = asyncio.create_task(reader.readline())
     receive = asyncio.create_task(clients[me].get())
@@ -14,17 +189,34 @@ async def chat(reader, writer):
         for q in done:
             if q is send:
                 send = asyncio.create_task(reader.readline())
-                print("GOOD")
-                await clients[me].put(f"{me} {q.result().decode().strip()}")
+                cur_rcv = q.result()
+                parsed_cmd = shlex.split(cur_rcv.decode())
+                if parsed_cmd[0] == "complete":
+                    res = " ".join(player.available_monsters())
+                else:
+                    arg_ind = 1
+                    args_len = len(parsed_cmd)
+                    cur_method = available_cmds[parsed_cmd[0]]
+                    parsed_cmd[0] = player
+                    cur_annotations = cur_method.__annotations__
+                
+                    for i in cur_annotations:
+                        if arg_ind == args_len:
+                            break
+                        if parsed_cmd[arg_ind]:
+                            parsed_cmd[arg_ind] = (cur_annotations[i](parsed_cmd[arg_ind]))
+                            arg_ind += 1
+
+                    res = cur_method.__call__(*parsed_cmd)
+                    res = str(res.count('\n') + 1) + '\n' + res
+                await clients[me].put(res)
+               
             
             elif q is receive:
-                print("VERY GOOD")
                 receive = asyncio.create_task(clients[me].get())
                 cur_rcv = q.result()
-                print(cur_rcv)
                 writer.write((f"{cur_rcv}\n").encode())
                 await writer.drain()
-                print('bad')
 
     send.cancel()
     receive.cancel()
@@ -34,7 +226,7 @@ async def chat(reader, writer):
     await writer.wait_closed()
 
 async def main():
-    server = await asyncio.start_server(chat, '0.0.0.0', 1337)
+    server = await asyncio.start_server(MUD, '0.0.0.0', 1337)
     async with server:
         await server.serve_forever()
 
-- 
2.34.1

